const express = require('express');
const router = express.Router();
const { Project, Object, ObjectConnection, User } = require('../models');
const auth = require('../middleware/auth');

// üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç—É
async function checkAccess(objectId, userId) {
  const obj = await Object.findByPk(objectId, {
    include: [{ association: 'project', include: ['members', 'owner'] }]
  });
  if (!obj) return { allowed: false, object: null };

  const project = obj.project;
  const isOwner = project.ownerId === userId;
  const isMember = project.members.some(m => m.id === userId);

  return { allowed: isOwner || isMember, object: obj };
}

// ‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å
router.post('/', auth, async (req, res) => {
  try {
    const { ObjectId, RelObjId, type } = req.body;
    const userId = req.user.userId;

    if (!ObjectId || !RelObjId || !type) {
      return res.status(400).json({ error: 'ObjectId, RelObjId –∏ type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±–æ–∏–º –æ–±—ä–µ–∫—Ç–∞–º
    const access1 = await checkAccess(ObjectId, userId);
    const access2 = await checkAccess(RelObjId, userId);
    if (!access1.allowed || !access2.allowed) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞' });
    }

    await ObjectConnection.sequelize.transaction(async (t) => {
      await ObjectConnection.bulkCreate([
        { ObjectId, RelObjId, type, role: '–ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫' },
        { ObjectId: RelObjId, RelObjId: ObjectId, type, role: '–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å' }
      ], { transaction: t });
    });

    res.json({ message: '–°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏' });
  }
});

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ –æ–±—ä–µ–∫—Ç–∞
router.get('/:id', auth, async (req, res) => {
  try {
    const userId = req.user.userId;
    const { allowed } = await checkAccess(req.params.id, userId);
    if (!allowed) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É' });
    }

    const connections = await ObjectConnection.findAll({
      where: { ObjectId: req.params.id },
      include: [{ model: Object, as: 'relatedObject' }]
    });

    res.json(connections);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π' });
  }
});

// ‚úÖ –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å
router.delete('/', auth, async (req, res) => {
  try {
    const { ObjectId, RelObjId } = req.body;
    const userId = req.user.userId;

    if (!ObjectId || !RelObjId) {
      return res.status(400).json({ error: 'ObjectId –∏ RelObjId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const access1 = await checkAccess(ObjectId, userId);
    const access2 = await checkAccess(RelObjId, userId);
    if (!access1.allowed || !access2.allowed) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É' });
    }

    await ObjectConnection.sequelize.transaction(async (t) => {
      await ObjectConnection.destroy({ where: { ObjectId, RelObjId }, transaction: t });
      await ObjectConnection.destroy({ where: { ObjectId: RelObjId, RelObjId: ObjectId }, transaction: t });
    });

    res.json({ message: '–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏' });
  }
});

// ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å
router.patch('/', auth, async (req, res) => {
  try {
    const { ObjectId, RelObjId, type } = req.body;
    const userId = req.user.userId;

    if (!ObjectId || !RelObjId || !type) {
      return res.status(400).json({ error: 'ObjectId, RelObjId –∏ –Ω–æ–≤—ã–π type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const access1 = await checkAccess(ObjectId, userId);
    const access2 = await checkAccess(RelObjId, userId);
    if (!access1.allowed || !access2.allowed) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É' });
    }

    await ObjectConnection.sequelize.transaction(async (t) => {
      await ObjectConnection.update({ type }, { where: { ObjectId, RelObjId }, transaction: t });
      await ObjectConnection.update({ type }, { where: { ObjectId: RelObjId, RelObjId: ObjectId }, transaction: t });
    });

    res.json({ message: '–°–≤—è–∑—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏' });
  }
});

router.get('/project/:projectId', auth, async (req, res) => {
  try {
    const userId = req.user.userId;
    const { projectId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
    const project = await Project.findByPk(projectId, {
      include: ['members', 'owner']
    });
    if (!project) {
      return res.status(404).json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const isOwner = project.ownerId === userId;
    const isMember = project.members.some(m => m.id === userId);
    if (!isOwner && !isMember) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    const connections = await ObjectConnection.findAll({
      include: [
        { model: Object, as: 'object', attributes: ['id', 'projectId'] },
        { model: Object, as: 'relatedObject', attributes: ['id', 'projectId'] }
      ]
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
    const filtered = connections.filter(conn =>
      conn.object.projectId === parseInt(projectId) &&
      conn.relatedObject.projectId === parseInt(projectId)
    );

    res.json(filtered);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π –ø—Ä–æ–µ–∫—Ç–∞' });
  }
});

module.exports = router;
