const express = require('express');
const jwt = require('jsonwebtoken');
const { Project, User, Object, ProjectMember } = require('../models');
const router = express.Router();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    jwt.verify(token, process.env.JWT_SECRET || 'secret', (err, user) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT:', err);
            return res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        req.user = user;
        next();
    });
};

// GET /projects - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// GET /projects - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/projects', authenticateToken, async (req, res) => {
    try {
        const currentUserId = req.user.userId;
        // üîπ 1. –ü—Ä–æ–µ–∫—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–ª–∞–¥–µ–ª–µ—Ü)
        const ownedProjects = await Project.findAll({
            where: { ownerId: currentUserId },
            include: [{
                model: User,
                as: 'owner',
                attributes: ['id', 'email', 'firstName', 'lastName']
            }]
        });

        // üîπ 2. –ü—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
        const memberProjects = await Project.findAll({
            include: [
                {
                    model: User,
                    as: 'members',
                    where: { id: currentUserId },
                    attributes: []
                },
                {
                    model: User,
                    as: 'owner',
                    attributes: ['id', 'email', 'firstName', 'lastName']
                }
            ]
        });

        // ‚úÖ 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        const allProjects = [...ownedProjects, ...memberProjects];
        const uniqueProjects = Array.from(new Map(allProjects.map(p => [p.id, p])).values());

        res.json(uniqueProjects);

    } catch (error) {
        console.error('=== –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–û–í ===');
        console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);

        res.status(500).json({
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});
// POST /projects - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
// POST /projects - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
router.post('/projects', authenticateToken, async (req, res) => {
    console.log('=== –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê ===');
    console.log('–î–∞–Ω–Ω—ã–µ:', req.body);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user.userId);

    try {
        const { name, description, startDate, endDate } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!name || !name.trim()) {
            return res.status(400).json({
                message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
        if (startDate && endDate) {
            const start = new Date(startDate);
            const end = new Date(endDate);

            if (end <= start) {
                return res.status(400).json({
                    message: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞'
                });
            }
        }

        const newProject = await Project.create({
            name: name.trim(),
            description: description || '',
            startDate: startDate || new Date(),
            endDate: endDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
            ownerId: req.user.userId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ownerId –≤–º–µ—Å—Ç–æ UserId
            status: 'planning'
        });

        console.log('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID:', newProject.id);
        const exists = await ProjectMember.findOne({
            where: { userId: req.user.userId, projectId: newProject.id }
        });

        if (!exists) {
            await ProjectMember.create({
                projectId: newProject.id,
                userId: req.user.userId,
                role: 'manager'
            });
            console.log(`–í–ª–∞–¥–µ–ª–µ—Ü ${req.user.userId} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ ${newProject.id}`);
        }
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const projectWithOwner = await Project.findByPk(newProject.id, {
            include: [{
                model: User,
                as: 'owner',
                attributes: ['id', 'email', 'firstName', 'lastName']
            }]
        });

        res.status(201).json(projectWithOwner);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);

        if (error.name === 'SequelizeValidationError') {
            return res.status(400).json({
                message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
                errors: error.errors.map(err => ({
                    field: err.path,
                    message: err.message
                }))
            });
        }

        res.status(500).json({
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// DELETE /projects/:id - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
// DELETE /projects/:id - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
router.delete('/projects/:id', authenticateToken, async (req, res) => {
    console.log('=== –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê ===');
    console.log('ID –ø—Ä–æ–µ–∫—Ç–∞:', req.params.id);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user.userId);

    try {
        const projectId = req.params.id;

        const project = await Project.findOne({
            where: {
                id: projectId,
                ownerId: req.user.userId // –ò—Å–ø–æ–ª—å–∑—É–µ–º ownerId –≤–º–µ—Å—Ç–æ UserId
            }
        });

        if (!project) {
            return res.status(404).json({
                message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ'
            });
        }

        await project.destroy();
        console.log('–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω:', projectId);

        res.json({ message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        res.status(500).json({
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});
router.get('/projects/:id', authenticateToken, async (req, res) => {
    try {
        const projectId = req.params.id;
        const currentUserId = req.user.userId;


        // 1Ô∏è‚É£ –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        const project = await Project.findOne({
            where: { id: projectId },
            include: [
                {
                    model: User,
                    as: 'owner',
                    attributes: ['id', 'email', 'firstName', 'lastName']
                },
                {
                    model: User,
                    as: 'members',
                    attributes: ['id', 'email', 'firstName', 'lastName']
                },
                {
                    model: Object,
                    as: 'objects',
                    separate: true,
                    order: [['number', 'ASC']],
                    include: [
                        { model: User, as: 'creator', attributes: ['id', 'email'] },
                        { model: User, as: 'members', attributes: ['id', 'email', 'firstName', 'lastName'] }
                    ]
                }
            ]
        });

        if (!project) {
            return res.status(404).json({ message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø (–≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
        const isOwner = project.ownerId === currentUserId;
        const isMember = project.members.some(m => m.id === currentUserId);

        if (!isOwner && !isMember) {
            return res.status(403).json({ message: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É' });
        }

        res.json(project);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞' });
    }
});


module.exports = router;